// <auto-generated />
using System;
using BookMyShowNewWebAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookMyShowNewWebAPI.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231118061431_sets")]
    partial class sets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Booking", b =>
                {
                    b.Property<long>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BookingID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BookingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("ShowID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("char(5)");

                    b.HasKey("BookingID");

                    b.HasIndex("ShowID");

                    b.HasIndex("UserID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.City", b =>
                {
                    b.Property<long>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityID"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Coupon", b =>
                {
                    b.Property<long>("CouponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CouponID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("date");

                    b.HasKey("CouponID");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Movie", b =>
                {
                    b.Property<long>("MovID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MovID"), 1L, 1);

                    b.Property<string>("MovName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("MovID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Multiplex", b =>
                {
                    b.Property<long>("MulID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MulID"), 1L, 1);

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.Property<string>("MulName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("int");

                    b.HasKey("MulID");

                    b.HasIndex("CityID");

                    b.ToTable("Multiplexes");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Show", b =>
                {
                    b.Property<long>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ShowID"), 1L, 1);

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<long>("MovieID")
                        .HasColumnType("bigint");

                    b.Property<long>("MulID")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("ShowDateTime")
                        .HasColumnType("time");

                    b.HasKey("ShowID");

                    b.HasIndex("MovieID");

                    b.HasIndex("MulID");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Role");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Wallet", b =>
                {
                    b.Property<long>("WalletID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WalletID"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("char(5)");

                    b.HasKey("WalletID");

                    b.HasIndex("UserID");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Booking", b =>
                {
                    b.HasOne("BookMyShowNewWebAPI.Entity.Show", "Show")
                        .WithMany()
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookMyShowNewWebAPI.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Show");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Multiplex", b =>
                {
                    b.HasOne("BookMyShowNewWebAPI.Entity.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Show", b =>
                {
                    b.HasOne("BookMyShowNewWebAPI.Entity.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookMyShowNewWebAPI.Entity.Multiplex", "Multiplex")
                        .WithMany()
                        .HasForeignKey("MulID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Multiplex");
                });

            modelBuilder.Entity("BookMyShowNewWebAPI.Entity.Wallet", b =>
                {
                    b.HasOne("BookMyShowNewWebAPI.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
